// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ANKR_adlibrary
import AVFoundation
import AVKit
import Foundation
import Network
import SafariServices
import Swift
import UIKit
import _Concurrency
public enum AdViewOutput {
  case contentLoaded
  case wasTouched
  case closed
  case timerOut
  case loadedImage(Foundation.Data)
  case loadedVideoURL(Foundation.URL)
  case error(Swift.String)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class AdView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var timeShow: Swift.Int
  @_Concurrency.MainActor(unsafe) final public let type: ANKR_adlibrary.AdType
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) public func startTimer()
  @_Concurrency.MainActor(unsafe) public func finishWork()
  @objc deinit
}
public struct StartModel {
  public init(appId: Swift.String, deviceId: Swift.String, publicAddress: Swift.String, language: Swift.String)
}
public enum AdType : Swift.String, Swift.Decodable {
  case banner
  case interstitial
  case rewarded
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum TextureType : Swift.String, Swift.Decodable {
  case image
  case video
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc public enum Align : Swift.Int {
  case top
  case bottom
  case left
  case right
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum HTTPMethod : Swift.String {
  case post
  case get
  case put
  case delete
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct MultipartFormDataFile {
}
public struct MultipartFormData {
}
public enum NetworkResult {
  case success(Foundation.Data, Foundation.URLResponse, Swift.Error?)
  case failure(Foundation.Data?, Foundation.URLResponse?, Swift.Error)
  public var error: Swift.Error? {
    get
  }
  public var value: Foundation.Data? {
    get
  }
}
public protocol Request {
  var baseURL: Swift.String { get }
  var path: Swift.String { get }
  var method: ANKR_adlibrary.HTTPMethod { get }
  var parameters: ANKR_adlibrary.RequestParameters { get }
  var multipartFormData: ANKR_adlibrary.MultipartFormData? { get }
  var headers: [Swift.String : Swift.String] { get }
  var autorized: Swift.Bool { get }
}
public enum RequestParameters {
  case body([Swift.String : Any]?)
  case url([Swift.String : Any]?)
}
final public class AdService {
  final public var output: ((ANKR_adlibrary.AdServiceOutput) -> Swift.Void)?
  public init()
  final public func start(appId: Swift.String, deviceId: Swift.String, publicAddress: Swift.String, language: Swift.String)
  final public func preloadAd(unitId: Swift.String)
  final public func show(for view: UIKit.UIView? = nil, unitId: Swift.String, align: ANKR_adlibrary.Align = .bottom)
  @objc deinit
}
public enum AdServiceOutput {
  case initialised(sessionId: Swift.String)
  case loaded(unitId: Swift.String)
  case failedLoaded(unitId: Swift.String, reason: Swift.String)
  case clicked(unitId: Swift.String)
  case opened(adUUID: Swift.String)
  case closed(unitId: Swift.String)
  case finished(unitId: Swift.String)
  case error(localized: Swift.String)
  case loadedImage(unitId: Swift.String, imageData: Foundation.Data)
  case loadedVideoURL(unitId: Swift.String, localVideoURL: Foundation.URL)
}
extension ANKR_adlibrary.AdType : Swift.Equatable {}
extension ANKR_adlibrary.AdType : Swift.Hashable {}
extension ANKR_adlibrary.AdType : Swift.RawRepresentable {}
extension ANKR_adlibrary.TextureType : Swift.Equatable {}
extension ANKR_adlibrary.TextureType : Swift.Hashable {}
extension ANKR_adlibrary.TextureType : Swift.RawRepresentable {}
extension ANKR_adlibrary.Align : Swift.Equatable {}
extension ANKR_adlibrary.Align : Swift.Hashable {}
extension ANKR_adlibrary.Align : Swift.RawRepresentable {}
extension ANKR_adlibrary.HTTPMethod : Swift.Equatable {}
extension ANKR_adlibrary.HTTPMethod : Swift.Hashable {}
extension ANKR_adlibrary.HTTPMethod : Swift.RawRepresentable {}
